# ... (Keep existing name, on, env, permissions sections) ...
name: Build and Release Project

on:
  push:
    branches: ["main"]
    tags: ['v*'] # Trigger on version tags (e.g., v1.0.0)
  pull_request:
    branches: ["main"]

env:
  # ... (Keep existing env vars) ...
  SOLUTION_FILE_PATH: .
  BUILD_PATH: "/build"
  OUTPUT_PATH: "/output"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  BUILD_CONFIGURATION: Release
  # --- NEW Squirrel Env Vars ---
  NUSPEC_FILE: R1Delta.nuspec # Name of your nuspec file
  PACKAGE_NAME: R1Delta      # MUST match <id> in nuspec and SquirrelAppName

permissions:
  contents: write # Needed to create releases and upload assets

jobs:
  build: # Keep your existing build job mostly as is
    runs-on: windows-latest
    outputs: # Define output to pass artifact path
      artifact_path: ${{ steps.format_files.outputs.output_dir }}
      artifact_name: delta # Pass artifact name
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for versioning if needed later

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      # --- VCPKG Cache & Restore (Keep as is) ---
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: cache-vcpkg-archives
        id: cache-vcpkg-archives
        uses: pat-s/always-upload-cache@v3
        # ... (rest of cache config) ...
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: ${{ runner.os }}-windows-vcpkg-${{ hashFiles('vcpkg/vcpkg_dry_run.txt') }}
      - name: Restore vcpkg packages
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: vcpkg integrate install
      - name: Restore NuGet packages
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      # --- Build Step (Keep as is) ---
      - name: Build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: msbuild /m /restore /p:Configuration=${{env.BUILD_CONFIGURATION}}  /p:OutDir=${{env.BUILD_PATH}} /p:WarningLevel=0 ${{env.SOLUTION_FILE_PATH}}

      # --- Checkout Scripts (Keep as is) ---
      - name: Checkout Scripts
        uses: actions/checkout@v4
        with:
          repository: r1delta/core
          path: core

      # --- Format Delta Files (Keep as is, but add id/output) ---
      - name: Format Delta Files
        id: format_files # Add an ID
        run: |
          mkdir ${{env.OUTPUT_PATH}}
          mkdir ${{env.OUTPUT_PATH}}/r1delta
          mkdir ${{env.OUTPUT_PATH}}/r1delta/bin_delta
          cp ${{env.BUILD_PATH}}/*.exe ${{env.OUTPUT_PATH}}/
          cp ${{env.BUILD_PATH}}/*.dll ${{env.OUTPUT_PATH}}/r1delta/bin_delta/
          robocopy core ${{ env.OUTPUT_PATH }}/r1delta /E /XD .git /XF *.md; exit 0
          echo "output_dir=${{ github.workspace }}${{ env.OUTPUT_PATH }}" >> $GITHUB_OUTPUT
        shell: bash # Use bash for GITHUB_OUTPUT redirection consistency

      # --- Upload Artifact (Keep as is) ---
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.format_files.outputs.output_dir }} # Use output from previous step
          name: delta # Keep artifact name consistent

  # --- NEW Release Job ---
  release:
    needs: build # Run after build job is successful
    # Only run this job if the trigger was a tag push
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }} # Use artifact name from build job
          path: ${{ github.workspace }}/release_files # Download to a specific folder

      - name: Setup NuGet CLI
        uses: NuGet/setup-nuget@v2
        with:
          nuget-version: 'latest'

      - name: Setup Chocolatey # Easiest way to get Squirrel CLI in CI
        uses: crazy-max/ghaction-chocolatey@v3

      - name: Install Squirrel.Windows
        run: choco install squirrel.windows --no-progress -y

      # Assume R1Delta.nuspec is checked into the root of the r1delta/r1delta repo
      - name: Checkout Nuspec # Need the nuspec file itself
        uses: actions/checkout@v4
        with:
          path: main_repo # Checkout to a subdirectory to avoid conflicts

      - name: Get Version from Tag
        id: get_version
        run: |
          # Extract version from tag like 'refs/tags/v1.2.3' -> '1.2.3'
          $version = "${{ github.ref }}".Substring("refs/tags/v".Length)
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Pack with NuGet
        run: |
          nuget pack ${{ github.workspace }}/main_repo/${{ env.NUSPEC_FILE }} `
            -Version ${{ steps.get_version.outputs.version }} `
            -Properties "env:OUTPUT_PATH=${{ github.workspace }}/release_files" `
            -OutputDirectory ${{ github.workspace }}/package_output `
            -NoPackageAnalysis
        shell: pwsh # Use PowerShell for easier multi-line commands and variable expansion

      - name: Create Release Directory
        run: mkdir ${{ github.workspace }}/squirrel_release

      - name: Releasify with Squirrel
        run: |
          Squirrel --releasify ${{ github.workspace }}/package_output/${{ env.PACKAGE_NAME }}.${{ steps.get_version.outputs.version }}.nupkg `
            --releaseDir ${{ github.workspace }}/squirrel_release `
            # Add optional parameters below:
            # --setupIcon path/to/your/icon.ico `
            # --loadingGif path/to/your/loading.gif `
            # --no-msi # If you don't want an MSI generated
            # --signWithParams "/a /f path/to/cert.pfx /p password /tr http://timestamp.digicert.com /td sha256" # Example signing
        shell: cmd # Squirrel often works best in cmd

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: R1Delta ${{ steps.get_version.outputs.version }}
          draft: false # Set to true if you want to manually publish later
          prerelease: false # Set to true if this is a pre-release

      - name: Upload Release Assets (Setup.exe, RELEASES, Full Nupkg)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/squirrel_release/Setup.exe
          asset_name: Setup.exe
          asset_content_type: application/octet-stream

      - name: Upload RELEASES File
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/squirrel_release/RELEASES
          asset_name: RELEASES
          asset_content_type: text/plain

      - name: Upload Full Nupkg Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/squirrel_release/${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}-full.nupkg
          asset_name: ${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}-full.nupkg
          asset_content_type: application/zip