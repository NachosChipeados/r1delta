# .github/workflows/msbuild.yml
name: Build and Release Project

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: # Optional: Allows manual triggering

env:
  # Use paths relative to the workspace for better consistency
  SOLUTION_FILE_PATH: .
  BUILD_PATH: ${{ github.workspace }}\build # Windows-style path relative to workspace
  OUTPUT_PATH: ${{ github.workspace }}\output # Windows-style path relative to workspace
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  BUILD_CONFIGURATION: Release
  # --- Squirrel Env Vars ---
  NUSPEC_FILE: R1Delta.nuspec # Name of your nuspec file
  PACKAGE_NAME: R1Delta      # MUST match <id> in nuspec and SquirrelAppName

permissions:
  contents: write # Needed to create releases and upload assets

jobs:
  build:
    runs-on: windows-latest
    outputs:
      # Pass the path to the directory containing the prepared files
      artifact_path: ${{ steps.format_files.outputs.output_dir }}
      # Pass the name used for the artifact upload/download
      artifact_name: delta # Keep this simple and static
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for versioning if needed later

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      # --- VCPKG Cache & Restore ---
      # Ensure vcpkg is bootstrapped/installed before this if not present on runner
      # Example: Run .\vcpkg\bootstrap-vcpkg.bat if needed

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: cache-vcpkg-archives
        id: cache-vcpkg-archives
        uses: pat-s/always-upload-cache@v3 # Consider standard actions/cache@v4 if 'always-upload' isn't strictly needed
        with:
          path: ${{ github.workspace }}/vcpkg_cache # Adjust if your cache path is different
          key: ${{ runner.os }}-windows-vcpkg-${{ hashFiles('**/vcpkg.json', '.github/workflows/**') }} # Recommended key
          restore-keys: |
            ${{ runner.os }}-windows-vcpkg-

      - name: vcpkg integrate install # Ensure vcpkg executable is in PATH
        # This step assumes vcpkg is already bootstrapped/installed and its root is known or in PATH
        # Add path if necessary: $env:PATH += ";${{ github.workspace }}\vcpkg"
        run: vcpkg integrate install
        shell: pwsh

      - name: Restore NuGet packages
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      # --- Build Step ---
      - name: Build Solution
        run: > # Using > for multi-line readability
          msbuild /m /restore
          /p:Configuration=${{env.BUILD_CONFIGURATION}}
          /p:OutDir=${{env.BUILD_PATH}}\
          /p:WarningLevel=0
          ${{env.SOLUTION_FILE_PATH}}
        # MSBuild automatically uses the correct shell (cmd/powershell)

      # --- Checkout Core Scripts ---
      - name: Checkout Core Scripts
        uses: actions/checkout@v4
        with:
          repository: r1delta/core
          path: core # Checkout to 'core' subdirectory

      # --- Prepare Output Directory ---
      - name: Prepare Output Directory
        id: format_files # Give step an ID to reference its outputs
        shell: pwsh
        run: |
          # Create directories using Windows paths
          $ErrorActionPreference = 'Stop' # Ensure script stops on error
          New-Item -ItemType Directory -Force -Path "${{ env.OUTPUT_PATH }}"
          New-Item -ItemType Directory -Force -Path "${{ env.OUTPUT_PATH }}\r1delta"
          New-Item -ItemType Directory -Force -Path "${{ env.OUTPUT_PATH }}\r1delta\bin_delta"

          # Copy files using Windows paths and commands
          Write-Host "Copying EXE files from ${{ env.BUILD_PATH }} to ${{ env.OUTPUT_PATH }}"
          Copy-Item -Path "${{ env.BUILD_PATH }}\*.exe" -Destination "${{ env.OUTPUT_PATH }}\"

          Write-Host "Copying DLL files from ${{ env.BUILD_PATH }} to ${{ env.OUTPUT_PATH }}\r1delta\bin_delta\"
          Copy-Item -Path "${{ env.BUILD_PATH }}\*.dll" -Destination "${{ env.OUTPUT_PATH }}\r1delta\bin_delta\"

          # Robocopy is a robust Windows tool for directory copying
          Write-Host "Copying core scripts using Robocopy"
          robocopy "${{ github.workspace }}\core" "${{ env.OUTPUT_PATH }}\r1delta" /E /XD .git /XF *.md
          # Check Robocopy exit code (0-7 are success/no-op/files copied)
          if ($LASTEXITCODE -ge 8) {
              throw "Robocopy failed with exit code $LASTEXITCODE"
          } else {
              Write-Host "Robocopy completed successfully (Exit Code: $LASTEXITCODE)"
          }

          # Output the path to the prepared directory for the artifact upload
          $outputPath = "${{ env.OUTPUT_PATH }}"
          Write-Host "Outputting directory path: $outputPath"
          echo "output_dir=$outputPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      # --- Upload Artifact ---
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          # Use the directory path output by the previous step
          path: ${{ steps.format_files.outputs.output_dir }}
          # Use the name defined in the job's outputs
          name: delta # This context (within the same job) is correct

  # --- Release Job ---
  release:
    needs: build # Run after build job is successful
    # Only run this job if the trigger was a tag push
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          # Use the artifact name passed from the build job (CORRECTED SYNTAX)
          name: ${{ needs.build.outputs.artifact_name }}
          # Download directly into a folder named 'release_files' in the workspace
          path: ${{ github.workspace }}\release_files

      - name: Setup NuGet CLI
        uses: NuGet/setup-nuget@v2
        with:
          nuget-version: 'latest'

      - name: Setup Chocolatey
        uses: crazy-max/ghaction-chocolatey@v3

      - name: Install Squirrel.Windows
        run: choco install squirrel.windows --no-progress -y

      # Checkout the main repository again to get the nuspec file
      - name: Checkout Nuspec File
        uses: actions/checkout@v4
        # No need for a specific path, checkout to workspace root

      - name: Get Version from Tag
        id: get_version
        run: |
          # Extract version from tag like 'refs/tags/v1.2.3' -> '1.2.3'
          $version = $env:GITHUB_REF -replace '^refs/tags/v', ''
          Write-Host "Extracted version: $version"
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      # Prepare for NuGet Pack: Copy nuspec to where the files are
      - name: Prepare for NuGet Pack
        run: Copy-Item -Path "${{ env.NUSPEC_FILE }}" -Destination "${{ github.workspace }}\release_files\"
        shell: pwsh

      - name: Pack with NuGet
        # Run nuget pack from the directory containing the nuspec and the files
        working-directory: ${{ github.workspace }}\release_files
        run: |
          nuget pack ${{ env.NUSPEC_FILE }} -Version ${{ steps.get_version.outputs.version }} -OutputDirectory ${{ github.workspace }}\package_output -NoPackageAnalysis
          # Note: Ensure your .nuspec file <file src=...> paths are relative
          # to the nuspec file itself (e.g., src="R1Delta.exe", src="r1delta\bin_delta\tier0.dll")
        shell: pwsh # Use PowerShell for easier multi-line commands and variable expansion

      - name: Create Release Output Directory
        run: mkdir ${{ github.workspace }}\squirrel_release
        shell: pwsh

      - name: Releasify with Squirrel
        # Run Squirrel from the workspace root, pointing to the nupkg and output dir
        run: |
          Squirrel --releasify "${{ github.workspace }}\package_output\${{ env.PACKAGE_NAME }}.${{ steps.get_version.outputs.version }}.nupkg" --releaseDir "${{ github.workspace }}\squirrel_release"
          REM Add optional parameters below if needed:
          REM --setupIcon path/to/your/icon.ico
          REM --loadingGif path/to/your/loading.gif
          REM --no-msi
          REM --signWithParams "/a /f path/to/cert.pfx /p password /tr http://timestamp.digicert.com /td sha256"
        shell: cmd # Squirrel often works best in cmd

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: R1Delta ${{ steps.get_version.outputs.version }}
          draft: false # Set to true if you want to manually publish later
          prerelease: false # Set to true if this is a pre-release

      # --- Upload Release Assets ---
      - name: Upload Setup.exe Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}\squirrel_release\Setup.exe
          asset_name: Setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable # More specific type

      - name: Upload RELEASES File Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}\squirrel_release\RELEASES
          asset_name: RELEASES
          asset_content_type: text/plain

      - name: Upload Full Nupkg Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # Squirrel renames the nupkg to include '-full'
          asset_path: ${{ github.workspace }}\squirrel_release\${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}-full.nupkg
          asset_name: ${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}-full.nupkg
          asset_content_type: application/zip